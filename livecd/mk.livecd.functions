# functions for mk.livecd

clean_mounts() 
{               
  for m in proc-live sysfs-live devpts-live ; do
    if grep -q $m /proc/mounts ; then
      echo I: unmounting $m
      umount $m || true
    fi
  done
}

get_rel_version () {
  local full=$1
  full=${full//Vyatta Core /VC}
  full=${full//Vyatta Subscription Edition /VSE}
  local -a arr=($full)
  local mod=''
  local date="${arr[1]}"
  if (( ${#arr[@]} == 3 )); then
    mod=".${arr[1]}"
    date="${arr[2]}"
  fi
  if ! (echo -n "$date" | egrep -q '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}$'); then
    return
  fi
  echo -n "${arr[0]}-${date}${mod}"
}

get_full_rel_version () {
  if [ -f version ]; then
    cat version
  fi
}

get_dev_version () {
  local cur_time=$(date +%m%d%H%M)
  local branch=$(git branch | awk '/^\*/ {print $2}')
  # note: this is used as the debian package version string, so
  # avoid problematic chars.
  # use a string starting with a numeric character for
  # full-upgrade compatibility.
  echo -n "999.$branch.$cur_time" | tr -d '_+-'
}

mk_version_package ()
{
    local savedir="$PWD"
    local etcdir="$savedir"/chroot/opt/vyatta/etc
    local config_src=community
    local tmpdir=/tmp/$$-version
    local vf=$tmpdir/opt/vyatta/etc
    local arch=$(dpkg-architecture -qDEB_BUILD_ARCH)

    FULLVERSION=$(get_full_rel_version)
    if [ -z "$FULLVERSION" ]; then
      FULLVERSION=$VYATTA_DEV_VERSION
      VVERSION=$VYATTA_DEV_VERSION
    else
      FULLVERSION="${FULLVERSION} ${VERTIME}"
      VVERSION=$(get_rel_version "$FULLVERSION")
      if [ -z "$VVERSION" ]; then
        VVERSION=$VYATTA_DEV_VERSION
      elif [[ "$VVERSION" == VSE* ]]; then
        config_src=supported
      fi
    fi

    mkdir -p $vf/config

    cp templates/$config_src/config.boot.default $vf/.

    cd $tmpdir
    mkdir DEBIAN

    echo I: generating build record
    cat <<-EOF > $vf/iso-build.txt
Built by:     $BUILTBY
Built on:     $HUMANTIME
Build ID:     $BUILDID
EOF

    # backwards compatible symlink
    ln -nsf iso-build.txt $vf/build.txt
    #echo "$BUILDID">$savedir/iso-label # is this needed?

    echo I: generating package list
    chroot "$savedir"/chroot /opt/vyatta/bin/save-package-report
    mv $etcdir/deb-versions.txt $vf/.

    ( cd "$savedir"/.. ; git submodule status 2>/dev/null ) \
         > $vf/iso-submodules.txt
    [ -s $vf/iso-submodules.txt ] || cp "$savedir"/iso-submodules.txt $vf/. 2>/dev/null

    echo vyatta-version ${VVERSION} >>$vf/deb-versions.txt

    echo "Version:      ${VVERSION}">$vf/version
    echo "Description:  ${FULLVERSION}">>$vf/version
    echo "Copyright:    2006-${CURYEAR} Vyatta, Inc.">>$vf/version

    (
        echo "Package: vyatta-version"
        echo "Version: ${VVERSION}"
        echo "Architecture: ${arch}"
        echo "Maintainer: Vyatta <debs@vyatta.com>"
        echo "Essential: no"
        echo "Section: base"
        echo "Replaces: vyatta-version, vc-version, vc2-version, devel-version, vyatta-cfg-system"
        echo -n Suggests: 
        <$vf/deb-versions.txt sed -e 's/ *\([^ ]*\)$/(>=\1),/' -e 's/^/ /'
        echo " nano"
        echo Description: "$prefix version file"
        echo " This package sets up the version file and a file containing"
        echo " the list of recommended packages (with the recommended versions)"
    ) >DEBIAN/control

    vpkgname="vyatta-version_${VVERSION}_${arch}.deb"
    mkdir ../$$-deb
    dpkg --build . "../$$-deb/$vpkgname" >/dev/null

    rm -rf $tmpdir
    cd $savedir
    cp /tmp/$$-deb/$vpkgname chroot/
    mv /tmp/$$-deb/$vpkgname config/chroot_local-packages/.
    # dpkg should be done inside chroot
    chroot chroot dpkg -i /$vpkgname
    rm chroot/$vpkgname
    rm -rf /tmp/$$-deb
}

clean_up_xensource ()
{
  # clean up the mounts
  echo I: unmounting the image file
  umount xensource/pimage
  echo I: releasing loop device $loop
  losetup -d $loop
}

# Create the Vyatta domU partition image
vyatta-xensource-partition-image ()
{
  echo I: creating XenSource partition image
  rm -rf xensource
  mkdir -p xensource/pimage

  arch=$(dpkg-architecture -qDEB_BUILD_ARCH)

  # using VVERSION throughout though I am not sure it is the right var

  # preallocated image
  # dd if=/dev/zero of=xensource/vyatta-xensource-$VVERSION-$arch.img bs=1024k count=4000
  # sparse image
  dd if=/dev/zero of=xensource/vyatta-xensource-$VVERSION-$arch.img bs=1k seek=4096k count=1

  # allocate loop device for file
  loop=$(losetup -f)
  losetup $loop xensource/vyatta-xensource-$VVERSION-$arch.img || echo E: unable to allocate loop device

  # create filesystem
  mke2fs -j $loop

  # mount loop device and copy root image
  echo I: mounting image file
  mount $loop xensource/pimage
  echo I: copying root to image partition
  cp -aR chroot/* xensource/pimage/

  # stage the chroot
  # need to edit the inittab get rid of t0 and add h0
  # setup config.boot if neccessary
  
  # we need an "unwrapped" verison of the kernel image for pygrub 
  echo I: fixing partition image kernel
  oimg=$(find xensource/pimage/boot/ -maxdepth 1 \
          -name 'vmlinuz-*-vyatta-virt' | head -1)
  if [ -z "$oimg" ]; then
    echo E: Cannot find vyatta-virt kernel in chroot
    clean_up_xensource
    return 1
  fi
  nimg=${oimg/vmlinuz/vmlinux}
  gzoff=$(../tools/find-string-index.pl '\x1f\x8b\x08\x00' $oimg)
  if [ -z "$gzoff" ]; then
    echo E: Cannot unwrap $oimg
    clean_up_xensource
    return 1
  fi
  dd if=$oimg of=$nimg.gz bs=1 skip=$gzoff
  if ! file $nimg.gz | grep -q 'gzip compressed data'; then
    echo E: Cannot unwrap $oimg
    clean_up_xensource
    return 1
  fi
  zcat $nimg.gz > $nimg.0
  if ! file $nimg.0 | grep -q 'ELF ..-bit LSB.*, stripped'; then
    echo E: Cannot unwrap $oimg
    clean_up_xensource
    return 1
  fi
  gzip -c $nimg.0 > $nimg
  rm -f $nimg.gz $nimg.0

  # create the default domU configuration file
  cat <<-EOF > xensource/vyatta-xensource-$VVERSION.cfg
	name='vyatta-$VVERSION'
	bootloader='/usr/bin/pygrub'
	on_reboot='restart'
	on_shutdown='destroy'
	on_crash='destroy'
	image_name='vyatta-$VVERSION'
	disk=['tap:aio:/var/xen/vyatta-xensource-$VVERSION-$arch.img,xvda1,w']
	vcpus=1
	memory=512
	EOF

  xen_kernel_version=$(ls xensource/pimage/boot/vmlinu[xz]-* | sed 's:xensource/pimage/boot/::g' | sort )

  (
      # stage the grub menu.lst for pygrub.
      echo -e "timeout\t5"
      echo
      for version in $xen_kernel_version; do
          echo -e "title\t$version"
          echo -e "root\t(hd0,0)"
          echo -e "kernel\t/boot/$version root=/dev/xvda1 ro console=hvc0"
          iversion=$(echo $version | sed 's/vmlinu[xz]-//g')
          echo -e "initrd\t/boot/initrd.img-$iversion"
          echo
      done
  ) >"xensource/pimage/boot/grub/menu.lst"

  # clean up the inittab
  # remove T0 so it doesn't respawn needlessly
  sed -i -e 's/T0/#T0/' xensource/pimage/etc/inittab
  # add the xen pv console
  echo -e "# xen console \nh0:12345:respawn:/sbin/getty 38400 hvc0" >> xensource/pimage/etc/inittab

  # set /etc/hostname
  rm -f xensource/pimage/etc/hostname
  echo vyatta > xensource/pimage/etc/hostname
  # set /etc/hosts
  rm -f xensource/pimage/etc/hosts
  echo 127.0.0.1 localhost vyatta > xensource/pimage/etc/hosts
  # set /etc/fstab
  rm -f xensource/pimage/etc/fstab
  echo -e "/dev/xvda1\t/\text3\tdefaults\t0 1" > xensource/pimage/etc/fstab

  clean_up_xensource

  echo I: compressing XenSource partition image file
  gzip xensource/vyatta-xensource-$VVERSION-$arch.img
}

get_chroot_kernel_version ()
{
  local kfile=$(find chroot/boot -type f -name 'vmlinuz-*' \
                | head -1 2>/dev/null)
  echo -n ${kfile##chroot/boot/vmlinuz-}
}

create_default_grub_config ()
{
  local gdir=chroot/opt/vyatta/etc/grub
  local gfile=$gdir/default-union-grub-entry
  local tmpl=templates/grub/default-union-grub-template
  local kver=$(get_chroot_kernel_version)
  if [ -z "$kver" ]; then
    echo 'E: Cannot find kernel in chroot.'
    echo 'E: Default grub config not created.'
    return
  fi
  mkdir -p $gdir
  sed "s/\\\$RVER\\\$/$VVERSION/g;s/\\\$KVER\\\$/$kver/g" $tmpl > $gfile
}

set_up_lh_config ()
{
  if [ -z "$VYATTA_BUILD_BRANCH" ]; then
    echo E: Build branch is not set
    exit 1
  fi
  local branch=$VYATTA_BUILD_BRANCH

  # get the branch/repo related parameters if any
  if [ -f config.vyatta/vbuild.conf ]; then
    source config.vyatta/vbuild.conf
  fi

  # set up the debian repo
  LB_MIRROR_BINARY="ftp://ftp.plathome.co.jp/pub/debian"
  LB_MIRROR_BOOTSTRAP="ftp://ftp.plathome.co.jp/pub/debian"
  export LB_MIRROR_BINARY LB_MIRROR_BOOTSTRAP

  local repo_dir=unstable
  if ! eval "$VYATTA_DEV_BUILD"; then
    # not dev build => use testing.
    repo_dir=testing
  fi

  # prepare the config files for live helper
  lh config
  (
    cd config.vyatta
    cp -af binary_local-includes chroot_apt chroot_local-hooks \
      chroot_local-includes chroot_sources chroot_local-packageslists \
      binary_local-hooks \
      ../config/

    # set up chroot_sources
    cd ../config/chroot_sources
    ## "base" and "extra" branches for overlay
    for branch in "$VBUILD_BASE_BRANCH" "${VBUILD_EXTRA_BRANCHES[@]}"; do
      if [ -z "$branch" ] || [ -f "vyatta-$branch.chroot" ]; then
        continue
      fi
      cp vyatta.chroot.gpg "vyatta-$branch.chroot.gpg"
    done

    # set up apt preferences
    cd ../chroot_apt
    for val in "$VYATTA_BUILD_BRANCH" "$VBUILD_BASE_BRANCH" \
                  "${VBUILD_EXTRA_PKGS[@]}"; do
      if [ -z "$val" ]; then
        continue
      fi
      local label=EXTRA
      local prio=999
      local pkg='*'
      if [ "$val" == "$VYATTA_BUILD_BRANCH" ]; then
        # "this" branch
        label=OVERLAY
        prio=1000
        branch=$val
      elif [ "$val" == "$VBUILD_BASE_BRANCH" ]; then
        # "base" branch
        label=BASE
        prio=998
        branch=$val
      else
        # extra package
        branch=${val%%_*}
        pkg=${val##*_}
      fi
      cat <<EOF >>preferences

Explanation: BEGIN $label ENTRY
Package: $pkg
Pin: release v=$branch
Pin-Priority: $prio
Explanation: END $label ENTRY
EOF
    done
  )

  if ! eval "$create_xendomzero"; then
    rm -f config/chroot_local-hooks/*xen*
  fi

  # set up "vyatta-kernel" packages list according to flavor
  kplist="config/chroot_local-packageslists/vyatta-kernel.$LB_LINUX_FLAVOURS"
  if [ -f "$kplist" ]; then
    # list exists. set it up.
    mv -f $kplist config/chroot_local-packageslists/vyatta-kernel.list
  fi
}

